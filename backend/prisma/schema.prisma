// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      UserRole @default(JOB_SEEKER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  applications Application[]
  yourJobs  jobPost[]
  comments  Comment[]
  jobsCreated Company[]
}

model jobPost {
  id         String        @id @default(cuid())
  title      String
  description String?
  company    Company       @relation(fields: [companyId], references: [id])
  companyId  String
  location   String?
  minSalary  Int?
  maxSalary  Int?
  status     JobStatus     @default(OPEN)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  tags       Tag[]
  applicants Application[]
  comments   Comment[]
  createdBy  User          @relation(fields: [createdById], references: [id])
  createdById String
}

model Company {
  id        String   @id @default(cuid())
  name      String
  description String?
  location  String?
  jobPosts  jobPost[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy User     @relation(fields: [createdById], references: [id])
  createdById String
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  jobPost   jobPost  @relation(fields: [jobPostId], references: [id])
  jobPostId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Application {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  jobPost   jobPost  @relation(fields: [jobPostId], references: [id])
  jobPostId String
  status    String   @default("PENDING") // e.g., PENDING, ACCEPTED, REJECTED
  appliedAt DateTime @default(now())
}

model Tag {
  id    String   @id @default(cuid())
  name  String   @unique
  posts jobPost[]
}

enum UserRole {
  JOB_SEEKER
  RECRUITER
  ADMIN
}

enum JobStatus {
  OPEN
  CLOSED
  IN_REVIEW
}
